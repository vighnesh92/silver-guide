{"version":3,"sources":["node_modules/highlightjs-line-numbers.js/src/highlightjs-line-numbers.js"],"names":[],"mappings":"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","sourcesContent":["// jshint multistr:true\n\n(function (w, d) {\n    'use strict';\n\n    var TABLE_NAME = 'hljs-ln',\n        LINE_NAME = 'hljs-ln-line',\n        CODE_BLOCK_NAME = 'hljs-ln-code',\n        NUMBERS_BLOCK_NAME = 'hljs-ln-numbers',\n        NUMBER_LINE_NAME = 'hljs-ln-n',\n        DATA_ATTR_NAME = 'data-line-number',\n        BREAK_LINE_REGEXP = /\\r\\n|\\r|\\n/g;\n\n    if (w.hljs) {\n        w.hljs.initLineNumbersOnLoad = initLineNumbersOnLoad;\n        w.hljs.lineNumbersBlock = lineNumbersBlock;\n        w.hljs.lineNumbersValue = lineNumbersValue;\n\n        addStyles();\n    } else {\n        w.console.error('highlight.js not detected!');\n    }\n\n    function isHljsLnCodeDescendant(domElt) {\n        var curElt = domElt;\n        while (curElt) {\n            if (curElt.className && curElt.className.indexOf('hljs-ln-code') !== -1) {\n                return true;\n            }\n            curElt = curElt.parentNode;\n        }\n        return false;\n    }\n\n    function getHljsLnTable(hljsLnDomElt) {\n        var curElt = hljsLnDomElt;\n        while (curElt.nodeName !== 'TABLE') {\n            curElt = curElt.parentNode;\n        }\n        return curElt;\n    }\n\n    // Function to workaround a copy issue with Microsoft Edge.\n    // Due to hljs-ln wrapping the lines of code inside a <table> element,\n    // itself wrapped inside a <pre> element, window.getSelection().toString()\n    // does not contain any line breaks. So we need to get them back using the\n    // rendered code in the DOM as reference.\n    function edgeGetSelectedCodeLines(selection) {\n        // current selected text without line breaks\n        var selectionText = selection.toString();\n\n        // get the <td> element wrapping the first line of selected code\n        var tdAnchor = selection.anchorNode;\n        while (tdAnchor.nodeName !== 'TD') {\n            tdAnchor = tdAnchor.parentNode;\n        }\n\n        // get the <td> element wrapping the last line of selected code\n        var tdFocus = selection.focusNode;\n        while (tdFocus.nodeName !== 'TD') {\n            tdFocus = tdFocus.parentNode;\n        }\n\n        // extract line numbers\n        var firstLineNumber = parseInt(tdAnchor.dataset.lineNumber);\n        var lastLineNumber = parseInt(tdFocus.dataset.lineNumber);\n\n        // multi-lines copied case\n        if (firstLineNumber != lastLineNumber) {\n\n            var firstLineText = tdAnchor.textContent;\n            var lastLineText = tdFocus.textContent;\n\n            // if the selection was made backward, swap values\n            if (firstLineNumber > lastLineNumber) {\n                var tmp = firstLineNumber;\n                firstLineNumber = lastLineNumber;\n                lastLineNumber = tmp;\n                tmp = firstLineText;\n                firstLineText = lastLineText;\n                lastLineText = tmp;\n            }\n\n            // discard not copied characters in first line\n            while (selectionText.indexOf(firstLineText) !== 0) {\n                firstLineText = firstLineText.slice(1);\n            }\n\n            // discard not copied characters in last line\n            while (selectionText.lastIndexOf(lastLineText) === -1) {\n                lastLineText = lastLineText.slice(0, -1);\n            }\n\n            // reconstruct and return the real copied text\n            var selectedText = firstLineText;\n            var hljsLnTable = getHljsLnTable(tdAnchor);\n            for (var i = firstLineNumber + 1 ; i < lastLineNumber ; ++i) {\n                var codeLineSel = format('.{0}[{1}=\"{2}\"]', [CODE_BLOCK_NAME, DATA_ATTR_NAME, i]);\n                var codeLineElt = hljsLnTable.querySelector(codeLineSel);\n                selectedText += '\\n' + codeLineElt.textContent;\n            }\n            selectedText += '\\n' + lastLineText;\n            return selectedText;\n        // single copied line case\n        } else {\n            return selectionText;\n        }\n    }\n\n    // ensure consistent code copy/paste behavior across all browsers\n    // (see https://github.com/wcoder/highlightjs-line-numbers.js/issues/51)\n    document.addEventListener('copy', function(e) {\n        // get current selection\n        var selection = window.getSelection();\n        // override behavior when one wants to copy line of codes\n        if (isHljsLnCodeDescendant(selection.anchorNode)) {\n            var selectionText;\n            // workaround an issue with Microsoft Edge as copied line breaks\n            // are removed otherwise from the selection string\n            if (window.navigator.userAgent.indexOf(\"Edge\") !== -1) {\n                selectionText = edgeGetSelectedCodeLines(selection);\n            } else {\n                // other browsers can directly use the selection string\n                selectionText = selection.toString();\n            }\n            e.clipboardData.setData('text/plain', selectionText);\n            e.preventDefault();\n        }\n    });\n\n    function addStyles () {\n        var css = d.createElement('style');\n        css.type = 'text/css';\n        css.innerHTML = format(\n            '.{0}{border-collapse:collapse}' +\n            '.{0} td{padding:0}' +\n            '.{1}:before{content:attr({2})}',\n        [\n            TABLE_NAME,\n            NUMBER_LINE_NAME,\n            DATA_ATTR_NAME\n        ]);\n        d.getElementsByTagName('head')[0].appendChild(css);\n    }\n\n    function initLineNumbersOnLoad (options) {\n        if (d.readyState === 'interactive' || d.readyState === 'complete') {\n            documentReady(options);\n        } else {\n            w.addEventListener('DOMContentLoaded', function () {\n                documentReady(options);\n            });\n        }\n    }\n\n    function documentReady (options) {\n        try {\n            var blocks = d.querySelectorAll('code.hljs,code.nohighlight');\n\n            for (var i in blocks) {\n                if (blocks.hasOwnProperty(i)) {\n                    lineNumbersBlock(blocks[i], options);\n                }\n            }\n        } catch (e) {\n            w.console.error('LineNumbers error: ', e);\n        }\n    }\n\n    function lineNumbersBlock (element, options) {\n        if (typeof element !== 'object') return;\n\n        async(function () {\n            element.innerHTML = lineNumbersInternal(element, options);\n        });\n    }\n\n    function lineNumbersValue (value, options) {\n        if (typeof value !== 'string') return;\n\n        var element = document.createElement('code')\n        element.innerHTML = value\n\n        return lineNumbersInternal(element, options);\n    }\n\n    function lineNumbersInternal (element, options) {\n        // define options or set default\n        options = options || {\n            singleLine: false\n        };\n\n        // convert options\n        var firstLineIndex = !!options.singleLine ? 0 : 1;\n\n        duplicateMultilineNodes(element);\n\n        return addLineNumbersBlockFor(element.innerHTML, firstLineIndex);\n    }\n\n    function addLineNumbersBlockFor (inputHtml, firstLineIndex) {\n\n        var lines = getLines(inputHtml);\n\n        // if last line contains only carriage return remove it\n        if (lines[lines.length-1].trim() === '') {\n            lines.pop();\n        }\n\n        if (lines.length > firstLineIndex) {\n            var html = '';\n\n            for (var i = 0, l = lines.length; i < l; i++) {\n                html += format(\n                    '<tr>' +\n                        '<td class=\"{0} {1}\" {3}=\"{5}\">' +\n                            '<div class=\"{2}\" {3}=\"{5}\"></div>' +\n                        '</td>' +\n                        '<td class=\"{0} {4}\" {3}=\"{5}\">' +\n                            '{6}' +\n                        '</td>' +\n                    '</tr>',\n                [\n                    LINE_NAME,\n                    NUMBERS_BLOCK_NAME,\n                    NUMBER_LINE_NAME,\n                    DATA_ATTR_NAME,\n                    CODE_BLOCK_NAME,\n                    i + 1,\n                    lines[i].length > 0 ? lines[i] : ' '\n                ]);\n            }\n\n            return format('<table class=\"{0}\">{1}</table>', [ TABLE_NAME, html ]);\n        }\n\n        return inputHtml;\n    }\n\n    /**\n     * Recursive method for fix multi-line elements implementation in highlight.js\n     * Doing deep passage on child nodes.\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNodes (element) {\n        var nodes = element.childNodes;\n        for (var node in nodes) {\n            if (nodes.hasOwnProperty(node)) {\n                var child = nodes[node];\n                if (getLinesCount(child.textContent) > 0) {\n                    if (child.childNodes.length > 0) {\n                        duplicateMultilineNodes(child);\n                    } else {\n                        duplicateMultilineNode(child.parentNode);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Method for fix multi-line elements implementation in highlight.js\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNode (element) {\n        var className = element.className;\n\n        if ( ! /hljs-/.test(className)) return;\n\n        var lines = getLines(element.innerHTML);\n\n        for (var i = 0, result = ''; i < lines.length; i++) {\n            var lineText = lines[i].length > 0 ? lines[i] : ' ';\n            result += format('<span class=\"{0}\">{1}</span>\\n', [ className,  lineText ]);\n        }\n\n        element.innerHTML = result.trim();\n    }\n\n    function getLines (text) {\n        if (text.length === 0) return [];\n        return text.split(BREAK_LINE_REGEXP);\n    }\n\n    function getLinesCount (text) {\n        return (text.trim().match(BREAK_LINE_REGEXP) || []).length;\n    }\n\n    function async (func) {\n        w.setTimeout(func, 0);\n    }\n\n    /**\n     * {@link https://wcoder.github.io/notes/string-format-for-string-formating-in-javascript}\n     * @param {string} format\n     * @param {array} args\n     */\n    function format (format, args) {\n        return format.replace(/\\{(\\d+)\\}/g, function(m, n){\n            return args[n] ? args[n] : m;\n        });\n    }\n\n}(window, document));\n"],"sourceRoot":"webpack:///","file":"highlightjs-line-numbers-js-es5.js"}